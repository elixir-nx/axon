<!-- livebook:{"persist_outputs":true} -->

# Multi-input / multi-output models

```elixir
Mix.install([
  {:axon, github: "elixir-nx/axon"},
  {:nx, "~> 0.3.0", override: true},
  {:kino, "~> 0.6.2"}
])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Creating multi-input models

Sometimes your application necessitates the use of multiple inputs. To use multiple inputs in an Axon model, you just need to declare multiple inputs in your graph:

```elixir
input_1 = Axon.input("input_1")
input_2 = Axon.input("input_2")

out = Axon.add(input_1, input_2)
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"input_1" => nil, "input_2" => nil}
  outputs: "add_0"
  nodes: 4
>
```

Notice when you inspect the model, it tells you what your models inputs are up front. You can also get metadata about your model inputs programmatically with `Axon.get_inputs/1`:

```elixir
Axon.get_inputs(out)
```

<!-- livebook:{"output":true} -->

```
%{"input_1" => nil, "input_2" => nil}
```

Each input is uniquely named, so you can pass inputs by-name into inspection and execution functions with a map:

```elixir
inputs = %{
  "input_1" => Nx.template({2, 8}, :f32),
  "input_2" => Nx.template({2, 8}, :f32)
}

Axon.Display.as_graph(out, inputs)
```

```elixir
{init_fn, predict_fn} = Axon.build(out)
params = init_fn.(inputs, %{})
```

<!-- livebook:{"output":true} -->

```
%{}
```

```elixir
inputs = %{
  "input_1" => Nx.iota({2, 8}, type: :f32),
  "input_2" => Nx.iota({2, 8}, type: :f32)
}

predict_fn.(params, inputs)
```

<!-- livebook:{"output":true} -->

```
#Nx.Tensor<
  f32[2][8]
  [
    [0.0, 2.0, 4.0, 6.0, 8.0, 10.0, 12.0, 14.0],
    [16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0]
  ]
>
```

If you forget a required input, Axon will raise:

```elixir
predict_fn.(params, %{"input_1" => Nx.iota({2, 8}, type: :f32)})
```

## Creating multi-output models

Depending on your application, you might also want your model to have multiple outputs. You can achieve this by using `Axon.container/2` to wrap multiple nodes into any supported Nx container:

```elixir
inp = Axon.input("data")

x1 = inp |> Axon.dense(32) |> Axon.relu()
x2 = inp |> Axon.dense(64) |> Axon.relu()

out = Axon.container({x1, x2})
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"data" => nil}
  outputs: "container_0"
  nodes: 6
>
```

```elixir
template = Nx.template({2, 8}, :f32)
Axon.Display.as_graph(out, template)
```

When executed, containers will return a data structure which matches their input structure:

```elixir
{init_fn, predict_fn} = Axon.build(out)
params = init_fn.(template, %{})
predict_fn.(params, Nx.iota({2, 8}, type: :f32))
```

<!-- livebook:{"output":true} -->

```
{#Nx.Tensor<
   f32[2][32]
   [
     [0.0, 0.0, 4.356653690338135, 0.0, 2.9040682315826416, 0.0, 0.0, 4.731359481811523, 1.2990269660949707, 0.018219254910945892, 4.65255069732666, 0.0, 1.9989535808563232, 0.0, 4.950902462005615, 0.0, 0.0, 1.7227286100387573, 3.0944247245788574, 1.1740816831588745, 0.0, 0.7876152396202087, 0.0, 0.0, 0.0, 1.0357654094696045, 0.0, 0.0, 3.2888245582580566, 0.1904522031545639, 0.0, 1.453606128692627],
     [0.0, 0.0, 6.0287184715271, 1.0349078178405762, 8.212652206420898, 0.0, 0.0, 12.817267417907715, 2.3070132732391357, 0.0404585525393486, 14.77083969116211, 0.0, 6.536672115325928, 0.0, 12.491460800170898, 0.0, 0.0, ...]
   ]
 >,
 #Nx.Tensor<
   f32[2][64]
   [
     [0.0, 2.5132815837860107, 1.6950541734695435, 1.7307755947113037, 0.0, 2.72218656539917, 0.0, 0.0, 0.7478247284889221, 2.290632724761963, 0.0, 0.0, 0.0, 3.0882949829101562, 0.0, 3.837374448776245, 2.283672332763672, 0.0, 3.169905185699463, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.9927127361297607, 0.7707458138465881, 0.0, 0.0, 0.0, 1.2103263139724731, 0.0, 0.0, 0.0, 0.0, 4.732686996459961, 1.5016757249832153, 0.0, 0.5466610789299011, 1.6743775606155396, 0.5262413024902344, 0.0, 2.1587936878204346, 3.0746116638183594, 0.0, 0.541134238243103, 0.527652382850647, 0.0, ...],
     ...
   ]
 >}
```

You can output maps as well:

```elixir
out = Axon.container(%{x1: x1, x2: x2})
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"data" => nil}
  outputs: "container_0"
  nodes: 6
>
```

```elixir
{init_fn, predict_fn} = Axon.build(out)
params = init_fn.(template, %{})
predict_fn.(params, Nx.iota({2, 8}, type: :f32))
```

<!-- livebook:{"output":true} -->

```
%{
  x1: #Nx.Tensor<
    f32[2][32]
    [
      [0.0, 0.0, 0.0, 0.6788651943206787, 3.1376218795776367, 0.7625126242637634, 0.0, 0.0, 0.0, 3.827993154525757, 0.3257756233215332, 3.9439897537231445, 0.0, 0.32799166440963745, 1.3542202711105347, 0.0, 0.0, 0.0, 4.339145183563232, 2.0982677936553955, 2.5747220516204834, 0.0, 0.0, 0.0, 0.0, 2.0010290145874023, 0.0, 0.9764652848243713, 0.45736363530158997, 0.0, 0.0, 0.0],
      [0.0, 0.0, 0.0, 2.938690423965454, 9.157918930053711, 3.187457323074341, 0.0, 0.0, 0.0, 8.821860313415527, 0.0, 12.089910507202148, 2.5572662353515625, 0.0, 0.0, 0.5857152342796326, 0.0, ...]
    ]
  >,
  x2: #Nx.Tensor<
    f32[2][64]
    [
      [0.0, 0.5271428823471069, 0.8531425595283508, 0.0, 0.0, 0.04287008196115494, 0.0, 0.0, 0.0, 0.0, 2.7716803550720215, 1.3894236087799072, 0.046695344150066376, 0.6261284351348877, 0.0, 0.0, 0.9538661241531372, 0.0, 1.2114932537078857, 0.0, 0.0, 0.7167136073112488, 2.7821764945983887, 0.8617554903030396, 0.0, 0.0, 0.6891035437583923, 0.059785615652799606, 0.3207031488418579, 0.0, 1.665869951248169, 3.8976922035217285, 0.4715063273906708, 0.553648054599762, 0.0, 0.0, 1.0261262655258179, 0.0, 0.0, 2.3822662830352783, 2.2003884315490723, 0.10308672487735748, 0.1933722198009491, 0.0, 1.8950676918029785, 0.043905675411224365, 0.0, 0.0, ...],
      ...
    ]
  >
}
```

Containers even support arbitrary nesting:

```elixir
out = Axon.container({%{x1: {x1, x2}, x2: %{x1: x1, x2: {x2}}}})
```

<!-- livebook:{"output":true} -->

```
#Axon<
  inputs: %{"data" => nil}
  outputs: "container_0"
  nodes: 6
>
```

```elixir
{init_fn, predict_fn} = Axon.build(out)
params = init_fn.(template, %{})
predict_fn.(params, Nx.iota({2, 8}, type: :f32))
```

<!-- livebook:{"output":true} -->

```
{%{
   x1: {#Nx.Tensor<
      f32[2][32]
      [
        [0.0, 0.5873235464096069, 0.6698439121246338, 3.754977226257324, 0.0, 0.0, 0.0, 4.015435695648193, 0.71774822473526, 2.20098876953125, 0.0, 2.3174760341644287, 0.0, 3.570925235748291, 0.0, 0.0, 0.0, 0.0, 0.0, 3.502974271774292, 4.018195629119873, 0.23042884469032288, 0.0, 0.04711412638425827, 4.122678279876709, 3.427716016769409, 1.4935590028762817, 1.2124342918395996, 0.0, 0.026326682418584824, 1.9900883436203003, 1.226431131362915],
        [0.0, 4.308546543121338, 2.5995798110961914, 6.808548927307129, 0.0, 0.0, 0.0, 10.869255065917969, 5.185024261474609, 4.15162467956543, 0.0, 4.958059787750244, 0.0, 11.354822158813477, 0.0, ...]
      ]
    >,
    #Nx.Tensor<
      f32[2][64]
      [
        [0.0, 2.353266954421997, 0.0, 0.0, 2.6485307216644287, 0.0, 0.0, 0.0, 3.299893856048584, 1.409728765487671, 0.0, 0.0, 0.7398840188980103, 1.297156810760498, 0.05507449060678482, 0.4900776147842407, 0.2217811495065689, 0.0, 0.7936353087425232, 3.214991569519043, 2.172712564468384, 1.9492543935775757, 0.0, 2.956852674484253, 0.0, 0.0, 0.7496925592422485, 0.0, 0.7349497675895691, 2.346543788909912, 0.0, 0.0, 0.14542971551418304, 0.0, 0.0, 3.516739845275879, 1.0666658878326416, 0.3832264840602875, 1.530163049697876, 0.0, 1.2136775255203247, 0.0, 0.9334118366241455, 1.4515053033828735, 0.0, 3.6882455348968506, ...],
        ...
      ]
    >},
   x2: %{
     x1: #Nx.Tensor<
       f32[2][32]
       [
         [0.0, 0.5873235464096069, 0.6698439121246338, 3.754977226257324, 0.0, 0.0, 0.0, 4.015435695648193, 0.71774822473526, 2.20098876953125, 0.0, 2.3174760341644287, 0.0, 3.570925235748291, 0.0, 0.0, 0.0, 0.0, 0.0, 3.502974271774292, 4.018195629119873, 0.23042884469032288, 0.0, 0.04711412638425827, 4.122678279876709, 3.427716016769409, 1.4935590028762817, 1.2124342918395996, 0.0, 0.026326682418584824, 1.9900883436203003, 1.226431131362915],
         [0.0, 4.308546543121338, 2.5995798110961914, 6.808548927307129, 0.0, 0.0, 0.0, 10.869255065917969, 5.185024261474609, 4.15162467956543, 0.0, 4.958059787750244, 0.0, 11.354822158813477, ...]
       ]
     >,
     x2: {#Nx.Tensor<
        f32[2][64]
        [
          [0.0, 2.353266954421997, 0.0, 0.0, 2.6485307216644287, 0.0, 0.0, 0.0, 3.299893856048584, 1.409728765487671, 0.0, 0.0, 0.7398840188980103, 1.297156810760498, 0.05507449060678482, 0.4900776147842407, 0.2217811495065689, 0.0, 0.7936353087425232, 3.214991569519043, 2.172712564468384, 1.9492543935775757, 0.0, 2.956852674484253, 0.0, 0.0, 0.7496925592422485, 0.0, 0.7349497675895691, 2.346543788909912, 0.0, 0.0, 0.14542971551418304, 0.0, 0.0, 3.516739845275879, 1.0666658878326416, 0.3832264840602875, 1.530163049697876, 0.0, 1.2136775255203247, 0.0, 0.9334118366241455, 1.4515053033828735, ...],
          ...
        ]
      >}
   }
 }}
```
